/*
* (c) Copyright, Real-Time Innovations, 2012.  All rights reserved.
* RTI grants Licensee a license to use, modify, compile, and create derivative
* works of the software solely for use with RTI Connext DDS. Licensee may
* redistribute copies of the software provided that all such copies are subject
* to this license. The software is provided "as is", with no warranty of any
* type, including any warranty for fitness for any purpose. RTI is under no
* obligation to maintain or support the software. RTI shall not be liable for
* any incidental or consequential damages arising out of the use or inability
* to use the software.
*/

/* MedicalDemo_publisher.cxx

A publication of data of type RTI_PATIENT_PatientConfig

This file is derived from code automatically generated by the rtiddsgen 
command:

rtiddsgen -language C++ -example <arch> MedicalDemo.idl

Example publication of type RTI_PATIENT_PatientConfig automatically generated by 
'rtiddsgen'. To test it, follow these steps:

(1) Compile this file and the example subscription.

(2) Start the subscription

(3) Start the publication

(4) [Optional] Specify the list of discovery initial peers and 
multicast receive addresses via an environment variable or a file 
(in the current working directory) called NDDS_DISCOVERY_PEERS. 

You can run any number of publisher and subscriber programs, and can 
add and remove them dynamically from the domain.
*/

#include <stdio.h>
#include <stdlib.h>

#include "MedicalDemo.h"
#include "MedicalDemoSupport.h"
#include "ndds/ndds_cpp.h"

#include "rs232.h"



class RTI_PATIENT_PatientConfigListener : public DDSDataReaderListener {
public:
	virtual void on_requested_deadline_missed(
		DDSDataReader* /*reader*/,
		const DDS_RequestedDeadlineMissedStatus& /*status*/) {}

	virtual void on_requested_incompatible_qos(
		DDSDataReader* /*reader*/,
		const DDS_RequestedIncompatibleQosStatus& /*status*/) {}

	virtual void on_sample_rejected(
		DDSDataReader* /*reader*/,
		const DDS_SampleRejectedStatus& /*status*/) {}

	virtual void on_liveliness_changed(
		DDSDataReader* /*reader*/,
		const DDS_LivelinessChangedStatus& /*status*/) {}

	virtual void on_sample_lost(
		DDSDataReader* /*reader*/,
		const DDS_SampleLostStatus& /*status*/) {}

	virtual void on_subscription_matched(
		DDSDataReader* /*reader*/,
		const DDS_SubscriptionMatchedStatus& /*status*/) {}

	virtual void on_data_available(DDSDataReader* reader);
};

void RTI_PATIENT_PatientConfigListener::on_data_available(DDSDataReader* reader)
{
	RTI_PATIENT_PatientConfigDataReader *RTI_PATIENT_PatientConfig_reader = NULL;
	RTI_PATIENT_PatientConfigSeq data_seq;
	DDS_SampleInfoSeq info_seq;
	DDS_ReturnCode_t retcode;
	int i;

	RTI_PATIENT_PatientConfig_reader = RTI_PATIENT_PatientConfigDataReader::narrow(reader);
	if (RTI_PATIENT_PatientConfig_reader == NULL) {
		fprintf(stderr, "DataReader narrow error\n");
		return;
	}

	retcode = RTI_PATIENT_PatientConfig_reader->take(
		data_seq, info_seq, DDS_LENGTH_UNLIMITED,
		DDS_ANY_SAMPLE_STATE, DDS_ANY_VIEW_STATE, DDS_ANY_INSTANCE_STATE);

	if (retcode == DDS_RETCODE_NO_DATA) {
		return;
	}
	else if (retcode != DDS_RETCODE_OK) {
		fprintf(stderr, "take error %d\n", retcode);
		return;
	}

	for (i = 0; i < data_seq.length(); ++i) {
		if (info_seq[i].valid_data) {
			printf("Received data\n");
			RTI_PATIENT_PatientConfigTypeSupport::print_data(&data_seq[i]);
		}
	}

	retcode = RTI_PATIENT_PatientConfig_reader->return_loan(data_seq, info_seq);
	if (retcode != DDS_RETCODE_OK) {
		fprintf(stderr, "return loan error %d\n", retcode);
	}
}




/* Delete all entities */
static int DDS_entities_shutdown(
    DDSDomainParticipant *participant)
{
    DDS_ReturnCode_t retcode;
    int status = 0;

    if (participant != NULL) {
        retcode = participant->delete_contained_entities();
        if (retcode != DDS_RETCODE_OK) {
            fprintf(stderr, "delete_contained_entities error %d\n", retcode);
            status = -1;
        }

        retcode = DDSTheParticipantFactory->delete_participant(participant);
        if (retcode != DDS_RETCODE_OK) {
            fprintf(stderr, "delete_participant error %d\n", retcode);
            status = -1;
        }
    }

    /* RTI Connext provides finalize_instance() method on
    domain participant factory for people who want to release memory used
    by the participant factory. Uncomment the following block of code for
    clean destruction of the singleton. */
    /*

    retcode = DDSDomainParticipantFactory::finalize_instance();
    if (retcode != DDS_RETCODE_OK) {
        fprintf(stderr, "finalize_instance error %d\n", retcode);
        status = -1;
    }
    */

    return status;
}

extern "C" int publisher_main(int domainId, int sample_count)
{
    DDSDomainParticipant *participant = NULL;
    DDSPublisher *publisher = NULL;
	DDSSubscriber *subscriber = NULL;
    DDSTopic *topic = NULL;
    DDSDataWriter *writer = NULL;
	RTI_PATIENT_PatientPulseDataWriter * RTI_PATIENT_PatientPulse_writer = NULL;
	RTI_PATIENT_PatientInfoDataWriter * RTI_PATIENT_PatientInfo_writer = NULL;
	RTI_PATIENT_PatientConfigDataWriter * RTI_PATIENT_PatientConfig_writer = NULL;
	RTI_PATIENT_PatientPulse *PatientPulseInstance = NULL;
	RTI_PATIENT_PatientInfo *PatientInfoInstance = NULL;
	RTI_PATIENT_PatientConfig *PatientConfigInstance = NULL;
	DDSDataReader *reader = NULL;
	RTI_PATIENT_PatientConfigListener *reader_listener = NULL;
	DDS_ReturnCode_t retcode;
    DDS_InstanceHandle_t instance_handle = DDS_HANDLE_NIL;
    const char *type_name = NULL;
    int count = 0;  
    DDS_Duration_t send_period = {4,0};

    /* Serial port variables */
	int i, n,
	cport_nr = 16,        /* /dev/ttyS0 (COM1 on windows) */
	bdrate = 9600;       /* 9600 baud */
	unsigned char buf[4096];
	char mode[] = { '8','N','1',0 };


    /* Set up the DDS Participant */
    participant = DDSTheParticipantFactory->create_participant(
        domainId, DDS_PARTICIPANT_QOS_DEFAULT, 
        NULL /* listener */, DDS_STATUS_MASK_NONE);
    if (participant == NULL) {
        fprintf(stderr, "create_participant error\n");
		DDS_entities_shutdown(participant);
        return -1;
    }

    /* Create the DDS Publisher for the PatientPulse and PatientInfo topics */
    publisher = participant->create_publisher(
        DDS_PUBLISHER_QOS_DEFAULT, NULL /* listener */, DDS_STATUS_MASK_NONE);
    if (publisher == NULL) {
        fprintf(stderr, "create_publisher error\n");
		DDS_entities_shutdown(participant);
        return -1;
    }

	/* Create the DDS Subscriber for the PatientConfig topic */
	subscriber = participant->create_subscriber(
		DDS_SUBSCRIBER_QOS_DEFAULT, NULL /* listener */, DDS_STATUS_MASK_NONE);
	if (subscriber == NULL) {
		fprintf(stderr, "create_subscriber error\n");
		DDS_entities_shutdown(participant);
		return -1;
	}


	/*** Setup the PulseType Topic ***/
	/* Register PatientPulseType before creating topic */
	type_name = RTI_PATIENT_PatientPulseTypeSupport::get_type_name();
	retcode = RTI_PATIENT_PatientPulseTypeSupport::register_type(
		participant, type_name);
	if (retcode != DDS_RETCODE_OK) {
		fprintf(stderr, "register_PatientPulse type error %d\n", retcode);
		DDS_entities_shutdown(participant);
		return -1;
	}

	/* Create PatientPulseTopic */
	topic = participant->create_topic(
		"PatientPulseTopic",
		type_name, DDS_TOPIC_QOS_DEFAULT, NULL /* listener */,
		DDS_STATUS_MASK_NONE);
	if (topic == NULL) {
		fprintf(stderr, "create_PatientPulseTopic topic error\n");
		DDS_entities_shutdown(participant);
		return -1;
	}

	writer = publisher->create_datawriter(
		topic, DDS_DATAWRITER_QOS_DEFAULT, NULL /* listener */,
		DDS_STATUS_MASK_NONE);
	if (writer == NULL) {
		fprintf(stderr, "create_datawriter error\n");
		DDS_entities_shutdown(participant);
		return -1;
	}
	RTI_PATIENT_PatientPulse_writer = RTI_PATIENT_PatientPulseDataWriter::narrow(writer);
	if (RTI_PATIENT_PatientPulse_writer == NULL) {
		fprintf(stderr, "Patient Pulse DataWriter narrow error\n");
		DDS_entities_shutdown(participant);
		return -1;
	}

	/* Create data sample for writing */
	PatientPulseInstance = RTI_PATIENT_PatientPulseTypeSupport::create_data();
	if (PatientPulseInstance == NULL) {
		fprintf(stderr, "RTI_PATIENT_PatientPulseTypeSupport::create_data error\n");
		DDS_entities_shutdown(participant);
		return -1;
	}



	/****** Setup the PatientInfoType Topic ******/
	/* Register PatienInfoType before creating topic */
	type_name = RTI_PATIENT_PatientInfoTypeSupport::get_type_name();
	retcode = RTI_PATIENT_PatientInfoTypeSupport::register_type(
		participant, type_name);
	if (retcode != DDS_RETCODE_OK) {
		fprintf(stderr, "register_PatientInfo type error %d\n", retcode);
		DDS_entities_shutdown(participant);
		return -1;
	}

	/* Create PatientInfoTopic */
	topic = participant->create_topic(
		"PatientInfoTopic",
		type_name, DDS_TOPIC_QOS_DEFAULT, NULL /* listener */,
		DDS_STATUS_MASK_NONE);
	if (topic == NULL) {
		fprintf(stderr, "create_PatientInfo topic error\n");
		DDS_entities_shutdown(participant);
		return -1;
	}

	writer = publisher->create_datawriter(
		topic, DDS_DATAWRITER_QOS_DEFAULT, NULL /* listener */,
		DDS_STATUS_MASK_NONE);
	if (writer == NULL) {
		fprintf(stderr, "create_PatientInfo datawriter error\n");
		DDS_entities_shutdown(participant);
		return -1;
	}
	RTI_PATIENT_PatientInfo_writer = RTI_PATIENT_PatientInfoDataWriter::narrow(writer);
	if (RTI_PATIENT_PatientInfo_writer == NULL) {
		fprintf(stderr, "PatientInfo DataWriter narrow error\n");
		DDS_entities_shutdown(participant);
		return -1;
	}

	/* Create data sample for writing */
	PatientInfoInstance = RTI_PATIENT_PatientInfoTypeSupport::create_data();
	if (PatientInfoInstance == NULL) {
		fprintf(stderr, "RTI_PATIENT_PatientInfoTypeSupport::create_data error\n");
		DDS_entities_shutdown(participant);
		return -1;
	}




	/********* Setup the PatientConfigType Topic ************/
	/* Register PatientConfigType before creating topic */
	type_name = RTI_PATIENT_PatientConfigTypeSupport::get_type_name();
	retcode = RTI_PATIENT_PatientConfigTypeSupport::register_type(
		participant, type_name);
	if (retcode != DDS_RETCODE_OK) {
		fprintf(stderr, "register_PatientConfig type error %d\n", retcode);
		DDS_entities_shutdown(participant);
		return -1;
	}

	topic = participant->create_topic(
		"PatientConfigTopic",
		type_name, DDS_TOPIC_QOS_DEFAULT, NULL /* listener */,
		DDS_STATUS_MASK_NONE);
	if (topic == NULL) {
		fprintf(stderr, "create_topic error\n");
		DDS_entities_shutdown(participant);
		return -1;
	}

	/* Create a data reader listener */
	reader_listener = new RTI_PATIENT_PatientConfigListener();

	reader = subscriber->create_datareader(
		topic, DDS_DATAREADER_QOS_DEFAULT, reader_listener,
		DDS_STATUS_MASK_ALL);
	if (reader == NULL) {
		fprintf(stderr, "create_datareader error\n");
		DDS_entities_shutdown(participant);
		delete reader_listener;
		return -1;
	}

	/* Create data sample for writing */
	PatientConfigInstance = RTI_PATIENT_PatientConfigTypeSupport::create_data();
    if (PatientConfigInstance == NULL) {
        fprintf(stderr, "RTI_PATIENT_PatientConfigTypeSupport::create_data error\n");
		DDS_entities_shutdown(participant);
        return -1;
    }

    /* For a data type that has a key, if the same instance is going to be
    written multiple times, initialize the key here
    and register the keyed instance prior to writing */

    // instance_handle = RTI_PATIENT_PatientConfig_writer->register_instance(*instance);

	/* Initialize serial port */
	if (RS232_OpenComport(cport_nr, bdrate, mode, 0))
	{
		printf("Can not open comport\n");

		return(0);
	}

	/* Initialize PatientInfo data */
	PatientInfoInstance->Id = "199";
	PatientInfoInstance->Age = 33;
	PatientInfoInstance->FirstName = "Charles";
	PatientInfoInstance->LastName = "Xavier";
	PatientInfoInstance->HeightCm = 180;
	PatientInfoInstance->Sex = "male";
	PatientInfoInstance->WeightKg = 90;

	/* Send PatientInfo */
	retcode = RTI_PATIENT_PatientInfo_writer->write(*PatientInfoInstance, instance_handle);
	if (retcode != DDS_RETCODE_OK) {
		fprintf(stderr, "write error %d\n", retcode);
	}

    /* Main loop */
    for (count=0; (sample_count == 0) || (count < sample_count); ++count) {

		/* Read from serial port */
		n = RS232_PollComport(cport_nr, buf, 4095);

		if (n > 0)
		{
			buf[n] = 0;   /* always put a "null" at the end of a string! */

			for (i = 0; i < n; i++)
			{
				if (buf[i] < 32)  /* replace unreadable control-codes by dots */
				{
					buf[i] = '.';
				}
			}

			printf("received %i bytes: %s\n", n, (char *)buf);
		}

        printf("Writing RTI_PATIENT_PatientPulse, count %d\n", count);

		/* Check the Patient Config */
		i = 0;
		while (PatientPulseInstance->readings[i] != NULL)
		{
			if (PatientPulseInstance->readings[i] > PatientConfigInstance->PulseHighThreshold)  PatientPulseInstance->readings[i] = PatientConfigInstance->PulseHighThreshold;
			if (PatientPulseInstance->readings[i] < PatientConfigInstance->PulseLowThreshold)  PatientPulseInstance->readings[i] = PatientConfigInstance->PulseLowThreshold;
			i++;
		}

        /* Modify the pulse data to be sent here */

		/* Write that Patient Pulse data */
        retcode = RTI_PATIENT_PatientPulse_writer->write(*PatientPulseInstance, instance_handle);
        if (retcode != DDS_RETCODE_OK) {
            fprintf(stderr, "write error %d\n", retcode);
        }

        NDDSUtility::sleep(send_period);
    }

    /*
    retcode = RTI_PATIENT_PatientConfig_writer->unregister_instance(
        *instance, instance_handle);
    if (retcode != DDS_RETCODE_OK) {
        fprintf(stderr, "unregister instance error %d\n", retcode);
    }
    */

    /* Delete data sample */
	retcode = RTI_PATIENT_PatientPulseTypeSupport::delete_data(PatientPulseInstance);
	if (retcode != DDS_RETCODE_OK) {
		fprintf(stderr, "RTI_PATIENT_PatientConfigTypeSupport::delete_data error %d\n", retcode);
	}

	retcode = RTI_PATIENT_PatientInfoTypeSupport::delete_data(PatientInfoInstance);
	if (retcode != DDS_RETCODE_OK) {
		fprintf(stderr, "RTI_PATIENT_PatientConfigTypeSupport::delete_data error %d\n", retcode);
	}

	retcode = RTI_PATIENT_PatientConfigTypeSupport::delete_data(PatientConfigInstance);
	if (retcode != DDS_RETCODE_OK) {
		fprintf(stderr, "RTI_PATIENT_PatientConfigTypeSupport::delete_data error %d\n", retcode);
	}

	/* Delete all entities */
    return DDS_entities_shutdown(participant);
}

int main(int argc, char *argv[])
{
    int domain_id = 0;
    int sample_count = 0; /* infinite loop */

    if (argc >= 2) {
        domain_id = atoi(argv[1]);
    }
    if (argc >= 3) {
        sample_count = atoi(argv[2]);
    }

    /* Uncomment this to turn on additional logging
    NDDSConfigLogger::get_instance()->
    set_verbosity_by_category(NDDS_CONFIG_LOG_CATEGORY_API, 
    NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
    */

    return publisher_main(domain_id, sample_count);
}

